FROM ubuntu:18.04
MAINTAINER Maureen Daum "mdaum@cs.washington.edu"

ARG CUDA_URL=https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run
ARG GPAC_URL=https://github.com/gpac/gpac/archive/v0.7.1.tar.gz
ARG CMAKE_KEY_URL=https://apt.kitware.com/keys/kitware-archive-latest.asc
ARG CMAKE_REPOSITORY_URL=https://apt.kitware.com/ubuntu/

# Update timezone
RUN apt-get update && apt-get install -y gnupg tzdata wget && \
    dpkg-reconfigure -f noninteractive tzdata

# Install cmake repository
RUN wget $CMAKE_KEY_URL -O cmake-key.pub && \
    apt-key add cmake-key.pub && \
    echo deb $CMAKE_REPOSITORY_URL bionic main > /etc/apt/sources.list.d/cmake.list && \
    apt-get update && \
    apt search cmake && \
    apt-get install -y cmake

# Install apt dependencies
RUN DEBIAN_FRONTEND=noninteractive apt-get install \
        -y \
        --no-install-recommends \
      ca-certificates \
      g++-8 \
      g++-6 \
      libmodule-install-perl \
      libprotobuf-dev \
      protobuf-compiler \
      libgoogle-glog-dev \
      libgtest-dev \
      nvidia-384 \
      git \
      python3-dev \
      python3-pip \
      sqlite3 \
      libsqlite3-dev \
      vim \
      less \
      software-properties-common \
      libopencv-dev \
      python-opencv && \
      apt-get clean

RUN add-apt-repository ppa:jonathonf/ffmpeg-4 && \
    apt-get update && \
    apt install -y ffmpeg \
      libavcodec-dev \
      libavformat-dev \
      libavdevice-dev

# Install GPAC
RUN wget $GPAC_URL -q -O gpac.tar.gz && \
    mkdir /opt/gpac && \
    tar xzf gpac.tar.gz -C /opt/gpac --strip-components 1 && \
    rm gpac.tar.gz && \
    cd /opt/gpac && \
    ./configure && \
    make lib && \
    make install-lib

# Install CUDA
RUN wget $CUDA_URL -q -O cuda.run && \
    chmod +x cuda.run && \
    PERL5LIB=. sh cuda.run --override --silent --toolkit \
    rm cuda.run

# Set gcc-8 to be default compiler
# Set gcc-6 to be the compiler for cuda
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 --slave /usr/bin/g++ g++ /usr/bin/g++-8 && \
    ln -s /usr/bin/gcc-6 /usr/local/cuda/bin/gcc && \
    ln -s /usr/bin/g++-6 /usr/local/cuda/bin/g++6

RUN python3 -m pip install --upgrade pip && \
    python3 -m pip install setuptools wheel jupyter notebook opencv-python pandas numpy matplotlib && \
    python3 -m pip install --upgrade nbconvert

# Install boost python
RUN cd /usr/src && \
    wget --no-verbose https://dl.bintray.com/boostorg/release/1.75.0/source/boost_1_75_0.tar.gz && \
    tar xzf boost_1_75_0.tar.gz && \
    cd boost_1_75_0 && \
    ./bootstrap.sh --with-python=$(which python3) && \
    ./b2 install && \
    ldconfig && \
    cd / && \
    rm -r /usr/src

WORKDIR ./tasm
